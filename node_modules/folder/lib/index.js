var fs        = require('fs'),
    http      = require('http'),
    path      = require('path'),
    parse     = require('url').parse;
    html      = require('./html'),
    join      = path.join,
    sep       = path.sep,
    normalize = path.normalize;

var Negotiator = require('negotiator');

var mediaTypes = {
  'text/html'        : 'html',
  'text/plain'       : 'plain',
  'application/json' : 'json'
};

function createError(code, msg) {
  var err = new Error(msg || http.STATUS_CODES[code]);
  err.status = code;
  return err;
};

function removeHidden(files) {
  return files.filter(function(file) {
    return '.' != file[0];
  });
}

module.exports = function folder(root, options) {
  options = options || {};

  // root required
  if (!root) throw new Error('Root path required.');

  var hidden   = options.hidden,
      filter   = options.filter,
      root     = normalize(root + sep),
      view     = options.view,
      template = options.template; // or use default in html.js

  return function(req, res, next) {
    if (req.method != 'GET' && req.method != 'HEAD')
       return next();
    
    var url  = parse(req.url),
        dir  = decodeURIComponent(url.pathname),
        path = normalize(join(root, dir)),
        originalUrl = parse(req.originalUrl),
        originalDir = decodeURIComponent(originalUrl.pathname),
        showUp = path != root;
    
    // null byte(s), bad request
    if (~path.indexOf('\0')) 
      return next(createError(400));

    // malicious path, forbidden
    if (0 != path.indexOf(root)) 
      return next(createError(403));

    // check if we have a directory
    fs.stat(path, function(err, stat) {
      if (err) return 'ENOENT' == err.code
        ? next()
        : next(err);

      if (!stat.isDirectory()) 
        return next();

      // fetch files
      fs.readdir(path, function(err, files) {
        if (err) return next(err);

        if (!hidden) files = removeHidden(files);
        if (filter)  files = files.filter(filter);
        files.sort();

        // content-negotiation
        var type = new Negotiator(req).preferredMediaType(Object.keys(mediaTypes));

        // not acceptable
        if (!type) 
          return next(createError(406));

        exports[mediaTypes[type]](req, res, files, next, originalDir, showUp, path, view, template);
      });
    });
  };
};

exports.json = function(req, res, files) {
  files = JSON.stringify(files);
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('Content-Length', files.length);
  res.end(files);
};

exports.plain = function(req, res, files) {
  files = files.join('\n') + '\n';
  res.setHeader('Content-Type', 'text/plain');
  res.setHeader('Content-Length', files.length);
  res.end(files);
};

exports.html = html;