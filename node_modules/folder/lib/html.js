var fs      = require('fs'),
    path    = require('path'),
    Batch   = require('batch'),
    extname = path.extname,
    join    = path.join;

var style    = fs.readFileSync(join(__dirname, '..', 'public', 'folder.css'));
var template = fs.readFileSync(join(__dirname, '..', 'public', 'folder.html'));

///////////////////////////////////////////////////////
// template

function get_template(str, cb) {
  if (!str)
    return cb(null, template);

  fs.readFile(str, cb);
}

///////////////////////////////////////////////////////
// icons

var icon_cache = {};

var icons = {
  list: null,

  path: path.join(__dirname, '..', 'public', 'mime'),

  find: function(extension) {
    if (!this.list) this.list = fs.readdirSync(icons.path);

    var file = 'file_extension_' + extension.replace(/^\./, '') + '.png';
    if (this.list.indexOf(file) != -1)
      return file;
  },

  default: 'page_white.png',
  folder: 'folder.png'
}

function load(icon) {
  if (icon_cache[icon]) return icon_cache[icon];
  return icon_cache[icon] = fs.readFileSync(icons.path + '/' + icon, 'base64');
}

function fileSort(a, b) {
  return Number(b.stat && b.stat.isDirectory()) - Number(a.stat && a.stat.isDirectory()) ||
    String(a.name).toLocaleLowerCase().localeCompare(String(b.name).toLocaleLowerCase());
}

function htmlPath(dir) {
  var curr = [];
  return dir.split('/').map(function(part){
    curr.push(encodeURIComponent(part));
    return part ? '<a href="' + curr.join('/') + '">' + part + '</a>' : '';
  }).join(' / ');
}

function stat(dir, files, cb) {
  var batch = new Batch();

  batch.concurrency(10);

  files.forEach(function(file){
    batch.push(function(done){
      fs.stat(join(dir, file), done);
    });
  });

  batch.end(cb);
}

function normalizeSlashes(path) {
  return path.split(path.sep).join('/');
};

function iconStyle (files, useIcons) {
  if (!useIcons) return '';

  var className;
  var i;
  var icon;
  var list  = [];
  var rules = {};
  var selector;
  var selectors = {};

  var style = '';

  files.forEach(function(file) {
    var isDir = '..' == file.name || (file.stat && file.stat.isDirectory());
    var ext = extname(file.name);
    
    icon = isDir ? icons.folder : icons.find(ext) || icons.default;

    className = 'icon-' + (isDir ? 'directory' : (icons.find(ext) ? ext.substring(1) : 'default'));
    selector  = '#files .' + className + ' .name';

    if (!rules[icon]) {
      rules[icon] = 'background-image: url(data:image/png;base64,' + load(icon) + ');'
      selectors[icon] = [];
      list.push(icon);
    }

    if (!~selectors[icon].indexOf(selector)) {
      selectors[icon].push(selector);
    }
  })

  list.forEach(function(icon) {
    style += selectors[icon].join(',\n') + ' {\n  ' + rules[icon] + '\n}\n';
  })

  return style;
}

function html(files, dir, useIcons, view) {
    return '<ul id="files" class="view-'+view+'">'
    + (view == 'details' ? (
      '<li class="header">'
      + '<span class="name">Name</span>'
      + '<span class="size">Size</span>'
      + '<span class="date">Modified</span>'
      + '</li>') : '')
    + files.map(function(file){
    var isDir = '..' == file.name || (file.stat && file.stat.isDirectory())
      , classes = []
      , path = dir.split('/').map(function (c) { return encodeURIComponent(c); });

    if (useIcons) {
      var ext = extname(file.name);
      ext = isDir ? '.directory' : (icons.find(ext) ? ext : '.default');
      classes.push('icon');
      classes.push('icon-' + ext.substring(1));
    }

    path.push(encodeURIComponent(file.name));

    var date = file.name == '..' ? ''
      : file.stat.mtime.toDateString()+' '+file.stat.mtime.toLocaleTimeString();
    var size = isDir ? '' : file.stat.size;

    return '<li><a href="'
      + normalizeSlashes(normalize(path.join('/')))
      + '" class="'
      + classes.join(' ') + '"'
      + ' title="' + file.name + '">'
      + '<span class="name">'+file.name+'</span>'
      + '<span class="size">'+size+'</span>'
      + '<span class="date">'+date+'</span>'
      + '</a></li>';

  }).join('\n') + '</ul>';
}

module.exports = function(req, res, files, next, dir, showUp, path, view, template) {
  get_template(template, function(err, str) {
    if (err) return next(err);

    stat(path, files, function(err, stats) {
      if (err) return next(err);

      files = files.map(function(file, i){ return { name: file, stat: stats[i] }; });
      files.sort(fileSort);
      if (showUp) files.unshift({ name: '..' });

      str = str.toString()
        .replace('{style}', style + iconStyle(files, icons))
        .replace('{files}', html(files, dir, icons, view))
        .replace('{directory}', dir)
        .replace('{linked-path}', htmlPath(dir));

      res.setHeader('Content-Type', 'text/html');
      res.setHeader('Content-Length', str.length);
      res.end(str);
    });
  });
};