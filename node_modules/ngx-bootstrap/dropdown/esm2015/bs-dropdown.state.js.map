{"version":3,"file":"bs-dropdown.state.js","sourceRoot":"","sources":["../../../../src/dropdown/bs-dropdown.state.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAKzD,MAAM,OAAO,eAAe;IAgB1B;QAfA,cAAS,GAAkB,MAAM,CAAC;QAClC,cAAS,GAAG,IAAI,CAAC;QACjB,gBAAW,GAAG,KAAK,CAAC;QACpB,eAAU,GAAG,KAAK,CAAC;QACnB,2BAAsB,GAAG,KAAK,CAAC;QAC/B,iBAAY,GAAG,IAAI,YAAY,EAAW,CAAC;QAC3C,qBAAgB,GAAG,IAAI,YAAY,EAAW,CAAC;QAC/C,gBAAW,GAAG,IAAI,YAAY,EAAW,CAAC;QAC1C,WAAM,GAAG,CAAC,CAAC;QAQT,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACxC,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;;;YArBF,UAAU","sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { BsComponentRef } from 'ngx-bootstrap/component-loader';\nimport { BsDropdownMenuDirective } from './bs-dropdown-menu.directive';\n\n@Injectable()\nexport class BsDropdownState {\n  direction: 'down' | 'up' = 'down';\n  autoClose = true;\n  insideClick = false;\n  isAnimated = false;\n  stopOnClickPropagation = false;\n  isOpenChange = new EventEmitter<boolean>();\n  isDisabledChange = new EventEmitter<boolean>();\n  toggleClick = new EventEmitter<boolean>();\n  counts = 0;\n  /**\n   * Content to be displayed as popover.\n   */\n  dropdownMenu: Promise<BsComponentRef<BsDropdownMenuDirective>>;\n  resolveDropdownMenu!: (componentRef: BsComponentRef<BsDropdownMenuDirective>) => void;\n\n  constructor() {\n    this.dropdownMenu = new Promise(resolve => {\n      this.resolveDropdownMenu = resolve;\n    });\n  }\n}\n"]}